// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  email          String        @unique
  name           String?       @unique
  password       String
  img            String?
  countryName    String?
  countryFlag    String?
  phone          String?
  desc           String?
  isSeller       Boolean       @default(false)
  createdAt      DateTime      @default(now())
  Gig            Gig[]
  Review         Review[]
  Order          Order[]
  Conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?       @db.ObjectId
  Message        Message[]
  Liked          Liked[]
}

model Gig {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  desc           String
  totalStars     Int      @default(0)
  starNumber     Int      @default(0)
  cat            Cat
  price          Int
  images         String[]
  shortDesc      String
  shortTitle     String
  deliveryTime   Int
  revisionNumber Int
  features       String[]
  sales          Int      @default(0)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @db.ObjectId
  createdAt      DateTime @default(now())
  Review         Review[]
  Order          Order[]
  Liked          Liked[]
}

enum Cat {
  design
  webDesign
  animation
  music
  dataEntry
  Seo
  social
  ai
  illustration
  programming
  translation
}

model Liked {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  gig       Gig      @relation(fields: [gigId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  gigId     String   @db.ObjectId

  @@unique([userId, gigId])
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  gig       Gig      @relation(fields: [gigId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  star      Int      @default(0)
  desc      String
  createdAt DateTime @default(now())
  gigId     String   @db.ObjectId
  userId    String   @db.ObjectId
}

model Order {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  gig          Gig      @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId        String   @db.ObjectId
  createdAt    DateTime @default(now())
  isCompleted  Boolean  @default(false)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.ObjectId
  secondUserId String   @db.ObjectId
}

model Conversation {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  users       User[]
  userIds     String[]  @db.ObjectId
  seenBy      String[]  @db.ObjectId
  createdAt   DateTime  @default(now())
  lastMessage String?
  messages    Message[]
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.ObjectId
  receiverId     String       @db.ObjectId
  text           String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @db.ObjectId
}
